/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface YogenExchangeInterface extends ethers.utils.Interface {
  functions: {
    "CREATE_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "create(address,address,uint256,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "currentFee()": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "executorFee()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "futures(uint256)": FunctionFragment;
    "isSigBurnt(bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "version()": FunctionFragment;
    "yogenFuture()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CREATE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executorFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "futures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSigBurnt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yogenFuture",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CREATE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "futures", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSigBurnt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "yogenFuture",
    data: BytesLike
  ): Result;

  events: {
    "FutureCreated(uint256,address,address)": EventFragment;
    "FutureExecuted(uint256,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FutureCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FutureExecuted"): EventFragment;
}

export class YogenExchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: YogenExchangeInterface;

  functions: {
    CREATE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "CREATE_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    create(
      initiator: string,
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      amountOut: BigNumberish,
      deliveryDate: BigNumberish,
      expiryDate: BigNumberish,
      initiatorSig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create(address,address,uint256,address,uint256,uint256,uint256,bytes)"(
      initiator: string,
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      amountOut: BigNumberish,
      deliveryDate: BigNumberish,
      expiryDate: BigNumberish,
      initiatorSig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    execute(
      futureId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      futureId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executorFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "executorFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    "feeCollector()"(overrides?: CallOverrides): Promise<[string]>;

    futures(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        initiatorNFTId: BigNumber;
        tokenIn: string;
        amountIn: BigNumber;
        tokenOut: string;
        amountOut: BigNumber;
        counterpartyNFTId: BigNumber;
        deliveryDate: BigNumber;
        isExecuted: boolean;
      }
    >;

    "futures(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        initiatorNFTId: BigNumber;
        tokenIn: string;
        amountIn: BigNumber;
        tokenOut: string;
        amountOut: BigNumber;
        counterpartyNFTId: BigNumber;
        deliveryDate: BigNumber;
        isExecuted: boolean;
      }
    >;

    isSigBurnt(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "isSigBurnt(bytes)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    "version()"(overrides?: CallOverrides): Promise<[string]>;

    yogenFuture(overrides?: CallOverrides): Promise<[string]>;

    "yogenFuture()"(overrides?: CallOverrides): Promise<[string]>;
  };

  CREATE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "CREATE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  create(
    initiator: string,
    tokenIn: string,
    amountIn: BigNumberish,
    tokenOut: string,
    amountOut: BigNumberish,
    deliveryDate: BigNumberish,
    expiryDate: BigNumberish,
    initiatorSig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create(address,address,uint256,address,uint256,uint256,uint256,bytes)"(
    initiator: string,
    tokenIn: string,
    amountIn: BigNumberish,
    tokenOut: string,
    amountOut: BigNumberish,
    deliveryDate: BigNumberish,
    expiryDate: BigNumberish,
    initiatorSig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentFee(overrides?: CallOverrides): Promise<BigNumber>;

  "currentFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    futureId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    futureId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executorFee(overrides?: CallOverrides): Promise<BigNumber>;

  "executorFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  "feeCollector()"(overrides?: CallOverrides): Promise<string>;

  futures(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      initiatorNFTId: BigNumber;
      tokenIn: string;
      amountIn: BigNumber;
      tokenOut: string;
      amountOut: BigNumber;
      counterpartyNFTId: BigNumber;
      deliveryDate: BigNumber;
      isExecuted: boolean;
    }
  >;

  "futures(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      initiatorNFTId: BigNumber;
      tokenIn: string;
      amountIn: BigNumber;
      tokenOut: string;
      amountOut: BigNumber;
      counterpartyNFTId: BigNumber;
      deliveryDate: BigNumber;
      isExecuted: boolean;
    }
  >;

  isSigBurnt(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isSigBurnt(bytes)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  yogenFuture(overrides?: CallOverrides): Promise<string>;

  "yogenFuture()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CREATE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "CREATE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    create(
      initiator: string,
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      amountOut: BigNumberish,
      deliveryDate: BigNumberish,
      expiryDate: BigNumberish,
      initiatorSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "create(address,address,uint256,address,uint256,uint256,uint256,bytes)"(
      initiator: string,
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      amountOut: BigNumberish,
      deliveryDate: BigNumberish,
      expiryDate: BigNumberish,
      initiatorSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    currentFee(overrides?: CallOverrides): Promise<BigNumber>;

    "currentFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(futureId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "execute(uint256)"(
      futureId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executorFee(overrides?: CallOverrides): Promise<BigNumber>;

    "executorFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    "feeCollector()"(overrides?: CallOverrides): Promise<string>;

    futures(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        initiatorNFTId: BigNumber;
        tokenIn: string;
        amountIn: BigNumber;
        tokenOut: string;
        amountOut: BigNumber;
        counterpartyNFTId: BigNumber;
        deliveryDate: BigNumber;
        isExecuted: boolean;
      }
    >;

    "futures(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        initiatorNFTId: BigNumber;
        tokenIn: string;
        amountIn: BigNumber;
        tokenOut: string;
        amountOut: BigNumber;
        counterpartyNFTId: BigNumber;
        deliveryDate: BigNumber;
        isExecuted: boolean;
      }
    >;

    isSigBurnt(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "isSigBurnt(bytes)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;

    yogenFuture(overrides?: CallOverrides): Promise<string>;

    "yogenFuture()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FutureCreated(
      futureId: null,
      initiator: string | null,
      counterparty: string | null
    ): EventFilter;

    FutureExecuted(
      futureId: null,
      initiator: string | null,
      counterparty: string | null,
      executor: string | null
    ): EventFilter;
  };

  estimateGas: {
    CREATE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "CREATE_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      initiator: string,
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      amountOut: BigNumberish,
      deliveryDate: BigNumberish,
      expiryDate: BigNumberish,
      initiatorSig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create(address,address,uint256,address,uint256,uint256,uint256,bytes)"(
      initiator: string,
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      amountOut: BigNumberish,
      deliveryDate: BigNumberish,
      expiryDate: BigNumberish,
      initiatorSig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentFee(overrides?: CallOverrides): Promise<BigNumber>;

    "currentFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(futureId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "execute(uint256)"(
      futureId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executorFee(overrides?: CallOverrides): Promise<BigNumber>;

    "executorFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    "feeCollector()"(overrides?: CallOverrides): Promise<BigNumber>;

    futures(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "futures(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSigBurnt(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "isSigBurnt(bytes)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    yogenFuture(overrides?: CallOverrides): Promise<BigNumber>;

    "yogenFuture()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CREATE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CREATE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      initiator: string,
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      amountOut: BigNumberish,
      deliveryDate: BigNumberish,
      expiryDate: BigNumberish,
      initiatorSig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create(address,address,uint256,address,uint256,uint256,uint256,bytes)"(
      initiator: string,
      tokenIn: string,
      amountIn: BigNumberish,
      tokenOut: string,
      amountOut: BigNumberish,
      deliveryDate: BigNumberish,
      expiryDate: BigNumberish,
      initiatorSig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      futureId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(uint256)"(
      futureId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executorFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "executorFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeCollector()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    futures(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "futures(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSigBurnt(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSigBurnt(bytes)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yogenFuture(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yogenFuture()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
